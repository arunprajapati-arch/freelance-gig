// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String      @id  @default(uuid())
  email         String      @unique
  name          String?
  username      String? @unique
  emailVerified Boolean
  image         String?
  createdAt     DateTime
  updatedAt     DateTime
  type          AccountType @default(CLIENT)
  followers     Follow[] @relation("UserFollowers")
  following     Follow[] @relation("UserFollowing")
  savedProducts SavedProduct[]
  products      Product[]
  sessions      Session[]
  accounts      Account[]
  @@map("user")
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  @@map("account")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}

model Product {
  id          String   @id @default(uuid())
  name        String
  description String?
  price       Decimal
  color       Color
  image       String
  type        ProductType
  createdAt   DateTime
  updatedAt   DateTime
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  savedProducts SavedProduct[]
  @@map("product")
}

model SavedProduct {
  id String @id @default(uuid())
  userId String
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  productId String
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  @@map("saved_product")
}

model Follow {
  id String @id @default(uuid())
  followerId String
  follower User @relation("UserFollowers", fields: [followerId], references: [id], onDelete: Cascade)
  followingId String
  following User @relation("UserFollowing", fields: [followingId], references: [id], onDelete: Cascade)

  @@map("follow")
}

enum AccountType {
  MANUFACTURER
  CLIENT
}

enum Color {
  RED
  GREEN
  BLUE
  YELLOW
  PURPLE
  ORANGE
  PINK
  BROWN
}

enum ProductType {
  TSHIRT
  JEANS
  SHIRT
  OTHER
}

